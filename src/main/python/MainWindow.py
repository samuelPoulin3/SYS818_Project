#! /usr/bin/env python3

""" MainWindow of Classification algorithm

    This is the main window of the algorithm.
"""
import os
import sys

from PyQt5 import QtCore
from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QFileSystemModel, QFileDialog
from plugins.ImportSubjects import ImportSubjects
from ui.Ui_MainWindow import Ui_MainWindow


DEBUG = False

class MainWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    stop_signal = QtCore.pyqtSignal()

    """Main Window."""
    def __init__(self, *args, **kwargs):
        super(MainWindow, self).__init__(*args, **kwargs)

        # Setup the Ui_MainWindow generated by QtDesigner
        self.setupUi(self)
        self.model = QFileSystemModel()
        self.model.setRootPath(os.path.expanduser('~'))

        ################### Remove this before final version #################
        self.subjects_path_lineEdit.setText("C:/Users/sampo/Python/PycharmProjects/SYS818_Project/Data/subjects")

        # Init internal variables
        self._subject_path = None
        self._use_multithread = True

    def on_new(self):
        """
        Blabla
        """
        pass

    def on_open(self):
        """
        Blabla
        """
        self._subject_path = QFileDialog.getExistingDirectory(
            self, 
            "Open Directory",
            "/home",
            QFileDialog.ShowDirsOnly
            | QFileDialog.DontResolveSymlinks)
        
        if self._subject_path == '' and self.subjects_path_lineEdit.text() == '':
            err_message = "ERROR MainWindow: no path selected"
            print(err_message)
        elif not self._subject_path == '' and self.subjects_path_lineEdit.text() == '':
            self.subjects_path_lineEdit.setText(self._subject_path)
        elif not self._subject_path == '' and not self.subjects_path_lineEdit.text() == '':
            self.subjects_path_lineEdit.setText(self._subject_path)

    def on_save(self):
        """
        Blabla
        """
        pass

    def on_exit(self):
        """ 
        Blabla
        """
        pass

    def on_run(self):
        """
        Blabla
        """
        self._subject_path = self.subjects_path_lineEdit.text()
        if self._use_multithread:
            # Setup and start the worker thread to avoid blocking the pyqt GUI
            self.thread = QtCore.QThread()
            self.thread.start()
            info_subjects = ImportSubjects(self._subject_path)
            
            self.thread.exit()

        else:
            info_subjects = ImportSubjects(self._subject_path)
            

    def on_stop(self):
        """ Blabla """
        pass

    def quit(self):
        """ quit the app """
        sys.exit()
        
